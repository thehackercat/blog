<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Python - Tag - LexusLee&#39;s blog</title>
        <link>https://example.com/tags/python/</link>
        <description>Python - Tag - LexusLee&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>lexuscyborg103@gmail.com (LexusLee)</managingEditor>
            <webMaster>lexuscyborg103@gmail.com (LexusLee)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 03 Dec 2017 22:30:07 &#43;0000</lastBuildDate><atom:link href="https://example.com/tags/python/" rel="self" type="application/rss+xml" /><item>
    <title>浅谈 Workflow 设计</title>
    <link>https://example.com/workflow-design/</link>
    <pubDate>Sun, 03 Dec 2017 22:30:07 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://example.com/workflow-design/</guid>
    <description><![CDATA[浅谈 Workflow 设计 LexusLee 背景 最近刚接触到 workflow 相关的东西，之前都没有造过这方面的轮子，所以看了一些框架总结了一下我认为的好的 Workflow 的设计应该是怎样的。
什么是 Workflow ? Workflow 是一些可重复执行的事件按特定的顺序&amp;路径组合成的事件流，这个组成的事件流通常是为了满足某一个流程较长的任务。
这些事件通常是不可再被细分，是具有原子性的。每个原子事件可能包含执行任务、文档或数据。这些事件按照提前声明好的规则组合起来就成了一个 Workflow .
e.g. 如上图所示，Workflow 类似软件工程中的流程图，指定了每个节点可能出现的路径分支，节点执行的事情以及节点的终结状态。
如何设计 Workflow ? 比较经典的 Workflow design pattern 应该满足以下几个元素：
 路径覆盖 事件原子性 有效的状态迁移  路径覆盖 路径覆盖是和节点状态相关的，通常的节点状态有如下几种：
 Start —— 开始 jobs ，标明 workflow 起点 Maybe —— 表示这个任务可能会执行，但不一定会执行，它的执行依赖于一定条件，比如上层节点的输出 Likely —— 和 Maybe 节点类似，但是比它的优先级更高，是作为与 Maybe 节点共享父节点的默认路径节点 Future —— 表示 workflow 执行体认为该路径一定会到达的节点，Future 节点的任务在不被 cancel 的情况下一定会执行 Waiting —— 表示当前任务是个阻塞任务，还在执行中，需要等待执行完毕才能进入下个路径 Ready —— 表示 Waiting 节点的任务已执行完，作为 Waiting 节点的 handler Complete —— 表示整个 workflow 的 Jobs 已经全部执行完毕，为终结节点 Cancel —— 表示任务被明确终止了，在状态迁移过程中不作为最终状态  事件原子性 pass]]></description>
</item><item>
    <title>Whoosh&#43;jieba 中文检索</title>
    <link>https://example.com/whoosh-search/</link>
    <pubDate>Wed, 26 Apr 2017 03:33:27 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://example.com/whoosh-search/</guid>
    <description><![CDATA[<h2 id="whoosh--jieba-中文检索">Whoosh + jieba 中文检索</h2>
<h3 id="背景">背景</h3>
<p>最近项目要用到 <a href="https://whoosh.readthedocs.io/" target="_blank" rel="noopener noreffer">Whoosh</a> 一个 Python 编写的索引检索模块，发现比较少中文资料并且看了学长的代码也好多不懂，故自己照着官网文档撸了一遍，把我自己的理解和官网一些不太清楚的解释写下来。</p>]]></description>
</item><item>
    <title>Twisted&#43;gevent 异步&#43;协程服务器开发</title>
    <link>https://example.com/rpc-server/</link>
    <pubDate>Mon, 04 Jul 2016 04:01:33 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://example.com/rpc-server/</guid>
    <description><![CDATA[<h2 id="背景">背景</h2>
<p>最近接触到用 Twisted 来写个 RPC 服务器，对高并发、性能和大量长连接时的稳定性方面有要求，所以应该在 Twisted 的基础上再造些轮子，最后考虑用 Twisted + gevent 来实现 「异步+协程」的部分。</p>]]></description>
</item><item>
    <title>Django REST Framework 5-关联性和超链接</title>
    <link>https://example.com/drf-tutorial-5/</link>
    <pubDate>Wed, 06 Apr 2016 02:01:33 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://example.com/drf-tutorial-5/</guid>
    <description><![CDATA[<h2 id="关联性和超链接">关联性和超链接</h2>
<p>之前我们的 api 都是用外键关联，然而实际上用超链接的方式更符合 RESTful 的思想。</p>
<p>所以在这一章中我们将要用超链接(代替外键的方式)来提高关联性。</p>
<h3 id="为-api-提供根路径">为 api 提供根路径</h3>
<p>由于要采用超链接的方式，而之前我们的 &lsquo;movies&rsquo; / &lsquo;directors&rsquo; / &lsquo;users&rsquo; 虽然有了 endpoints ，但 api 本身却没有一个整体的根路径，所以我们使用 <code>@api_view</code> 装饰器来创建一个根路径。</p>
<p>在 <code>douban/views.py</code> 中添加如下代码:</p>]]></description>
</item><item>
    <title>Django REST Framework 4-验证和授权</title>
    <link>https://example.com/drf-tutorial-4/</link>
    <pubDate>Mon, 04 Apr 2016 02:01:33 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://example.com/drf-tutorial-4/</guid>
    <description><![CDATA[验证与授权 目前来看，我们的 API 并没有权限上的限制(即任何人都可以编辑或删除我们的 Movies )，这不是我们想要的。所以我们需要在 API 上做些限制以确保:
 Movies 与 Users 关联起来。 只有授权了的用户才能创建新的 Movies。 只有 Movies 的创建者才可以更新或删除它。 未授权的用户只能进行查看。  在 models 中增加以下信息 我们先把之前注释掉的
1 2 3 4 5 6 7  director = models.ForeignKey(&#39;celebrity&#39;, related_name=&#39;Movies&#39;) class celebrity(models.Model): name = models.CharField(max_length=100, blank=True, default=&#39;&#39;) age = models.IntegerField() gender = models.CharField(choices=GENDER_CHOICES, default=&#39;male&#39;, max_length=20)   关联导演类的注释解开，来看看多张表在生成的 api 里的关联性。
接着在 models.py 中的 Movies 类中加入以下代码来确定 Movies 的创建者:
1  owner = models.ForeignKey(&#39;auth.User&#39;, related_name=&#39;Movies&#39;)   最后 models.]]></description>
</item><item>
    <title>Django REST Framework 3-基于类的视图</title>
    <link>https://example.com/drf-tutorial-3/</link>
    <pubDate>Sun, 03 Apr 2016 02:01:33 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://example.com/drf-tutorial-3/</guid>
    <description><![CDATA[基于类的视图 基于类的视图比先前基于函数的视图的可重用性更强，可以更多快好省地 ( DRY )地写出简洁的代码。
把 API 用基于类的视图的方式重写 编辑 douban/views.py 进行如下重写
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53  #!/usr/bin/python # -*- coding: utf-8 -*- from douban.]]></description>
</item><item>
    <title>Django REST Framework 2-请求和响应</title>
    <link>https://example.com/drf-tutorial-2/</link>
    <pubDate>Sat, 02 Apr 2016 02:01:33 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://example.com/drf-tutorial-2/</guid>
    <description><![CDATA[请求与响应 请求对象 DRF 提供了一个 request 对象，它继承自 HttpRequest 并且提供了更丰富的对 request 的解析处理的方法。其中最核心的是 request 对象的 request.data 属性，它看起来和 Django 的request.POST 相似，但是在处理 Web API 上更强大些。
1 2  request.POST # Only handles form data. Only works for &#39;POST&#39; method. request.data # Handles arbitrary data. Works for &#39;POST&#39;, &#39;PUT&#39; and &#39;PATCH&#39; methods.   request.data 相比于 request.POST 能够处理 api 中的 「POST」、「PUT」、「PATCH」等请求。
返回对象 DRF 也提供了一个 response 对象，它能把未 render 的对象(数据)通过一定方式转化为正确的数据格式返回给客户端。
1  return Response(data) # Renders to content type as requested by the client.]]></description>
</item><item>
    <title>Django REST Framework 1-序列化</title>
    <link>https://example.com/drf-tutorial-1/</link>
    <pubDate>Fri, 01 Apr 2016 02:01:33 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://example.com/drf-tutorial-1/</guid>
    <description><![CDATA[序列化 环境搭建 首先我们先新建一个 restapi 项目并安装上 django-rest-framework (DRF) 环境
1 2 3 4  $ pip install djangorestframework $ python manage.py startnewproject restapi $ cd restapi $ python manage.py startnewapp douban   接着，我们需要在 setting.py 里的加入如下代码:
1 2 3 4 5  INSTALLED_APPS = ( ... &#39;rest_framework&#39;, &#39;douban&#39;, )   建立模型 由于我炒鸡喜欢看电影，所以仿着 douban-API 来做个简易的豆瓣电影的 rest-api 。
所以我们就用这个「仿豆瓣电影 api 」来作为栗子开始教程吧！
编辑 douban/models.py 文件并加入以下代码:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  #!]]></description>
</item><item>
    <title>Django REST Framework 快速上手</title>
    <link>https://example.com/django-rest-framework/</link>
    <pubDate>Tue, 29 Mar 2016 15:43:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://example.com/django-rest-framework/</guid>
    <description><![CDATA[<h2 id="django-rest-framework-快速上手">Django REST Framework 快速上手</h2>
<h3 id="背景">背景</h3>
<p>这几天正好在研究 RESTful 的方式来写 API，然后上手 Django REST 框架。</p>
<p>Django REST Framework (以下简称 DRF )是一个轻量级的库，熟悉 Django 的话可以很容易的用它来构建 Web API。</p>]]></description>
</item><item>
    <title>在 Ubuntu 下搭建 uWSGI &#43; nginx &#43; Django</title>
    <link>https://example.com/nginx-uwsgi-django/</link>
    <pubDate>Sat, 27 Feb 2016 21:04:07 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://example.com/nginx-uwsgi-django/</guid>
    <description><![CDATA[<h3 id="背景-">背景 :</h3>
<p>公司要求用 Django 做些项目，之前按网上教程搭环境的时候就遇到很多问题，感觉有些教程都是有误的，今天用 uWSGI 开多线程的时候服务器报了 HTTP 500 的错( Internal Server Error )，然后就一直连不上去了。所以按<a href="http://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html" target="_blank" rel="noopener noreffer">官网的教程</a>重新配置一遍，把出现的问题记录下来。</p>]]></description>
</item></channel>
</rss>
