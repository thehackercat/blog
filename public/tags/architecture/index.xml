<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Architecture - Tag - LexusLee&#39;s blog</title>
        <link>https://example.com/tags/architecture/</link>
        <description>Architecture - Tag - LexusLee&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>lexuscyborg103@gmail.com (LexusLee)</managingEditor>
            <webMaster>lexuscyborg103@gmail.com (LexusLee)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 07 Jul 2020 22:30:07 &#43;0000</lastBuildDate><atom:link href="https://example.com/tags/architecture/" rel="self" type="application/rss+xml" /><item>
    <title>告警收敛设计</title>
    <link>https://example.com/alert-convergence/</link>
    <pubDate>Tue, 07 Jul 2020 22:30:07 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://example.com/alert-convergence/</guid>
    <description><![CDATA[背景 最近在豆瓣做面向开发者的 op 报警系统, 最头疼的是下列几种情况
 脉冲型报警 单个原因引起的报警发散 多个报警为同个诱因  由于目前现有的一些告警系统都强依赖后面的监控 agent/cmdb , 比如 open-falcon/prometheus 虽然都支持了告警收敛这一套, 但要从豆瓣的 statsd+icinga 迁移到 alertManager 需要折腾一阵。而我实际只想要一个中间轻量的 alert exporter 去做告警聚合/收敛.
所以我期望实现下列 feature:
 对于告警可配置梯度, 比如 apperr &gt; 50, 则立马报警不做 retry, 并且 notify_interval 为 1 分钟; 对于 50 &gt; apperr &gt; 20 则有3次 retry, retry 周期为 1 分钟, 报警周期为2分钟. 对于 apperr &lt; 1 则 retry 5 次, retry 周期 3 分钟, 报警周期 5 分钟. 告警配置中可用 与|或|非 的方式进行组合告警,告警收敛. 如  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  [rules] apperr - script: xxx - label: http, service, statsd, codeerr - warning_threshold: 0.]]></description>
</item><item>
    <title>坦率地讲 服务熔断 &amp; 服务降级</title>
    <link>https://example.com/service-fallback/</link>
    <pubDate>Thu, 01 Feb 2018 19:03:25 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://example.com/service-fallback/</guid>
    <description><![CDATA[<h2 id="坦率地讲-服务熔断--服务降级">坦率地讲 服务熔断 &amp; 服务降级</h2>
<h3 id="背景">背景</h3>
<p>之前遇到个问题，发现一个系统如果拆分了太多业务类服务，或者依赖于大量的第三方服务，就很容易因为某个服务的故障导致整个系统不可用，比如</p>
<ul>
<li>模块中使用了 Elastic Search 进行监控，但是 ES 突然挂了，相关的 api 的调用报错导致级联的服务全部阻塞，那么应该要有规避由 ES 调用 raise 出的异常或者调用超时而导致整个模块或整个系统崩溃的保护措施。</li>
<li>使用 AWS 或 阿里云 的 ECS 服务来作为 micro-service 的载体，但是 ECS 服务故障或者过载了导致整个业务链无法正常进行，那么应有对应的降级或者限制调用频度的方案来进行保护。</li>
</ul>]]></description>
</item><item>
    <title>PySpark 词频统计搜索引擎的设计思路</title>
    <link>https://example.com/spark-search-engine/</link>
    <pubDate>Tue, 09 May 2017 14:00:41 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://example.com/spark-search-engine/</guid>
    <description><![CDATA[<h2 id="pyspark-词频统计搜索引擎的设计思路">PySpark 词频统计搜索引擎的设计思路</h2>
<p>记录下我的思路</p>]]></description>
</item></channel>
</rss>
